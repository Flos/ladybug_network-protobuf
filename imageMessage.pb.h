// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: imageMessage.proto

#ifndef PROTOBUF_imageMessage_2eproto__INCLUDED
#define PROTOBUF_imageMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace ladybug5_network {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_imageMessage_2eproto();
void protobuf_AssignDesc_imageMessage_2eproto();
void protobuf_ShutdownFile_imageMessage_2eproto();

class LadybugTimeStamp;
class Image;
class ImageMessage;
class RequestImageMessage;

enum ImageType {
  LADYBUG_RAW_CAM0 = 1,
  LADYBUG_RAW_CAM1 = 2,
  LADYBUG_RAW_CAM2 = 4,
  LADYBUG_RAW_CAM3 = 8,
  LADYBUG_RAW_CAM4 = 16,
  LADYBUG_RAW_CAM5 = 32,
  LADYBUG_ALL_RAW_IMAGES = 63,
  LADYBUG_RECTIFIED_CAM0 = 64,
  LADYBUG_RECTIFIED_CAM1 = 128,
  LADYBUG_RECTIFIED_CAM2 = 256,
  LADYBUG_RECTIFIED_CAM3 = 512,
  LADYBUG_RECTIFIED_CAM4 = 1024,
  LADYBUG_RECTIFIED_CAM5 = 2048,
  LADYBUG_ALL_RECTIFIED_IMAGES = 4032,
  LADYBUG_PANORAMIC = 4096,
  LADYBUG_DOME = 8192,
  LADYBUG_SPHERICAL = 16384,
  LADYBUG_ALL_CAMERAS_VIEW = 32768,
  LADYBUG_ALL_OUTPUT_IMAGE = 2147483647
};
bool ImageType_IsValid(int value);
const ImageType ImageType_MIN = LADYBUG_RAW_CAM0;
const ImageType ImageType_MAX = LADYBUG_ALL_OUTPUT_IMAGE;
const int ImageType_ARRAYSIZE = ImageType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ImageType_descriptor();
inline const ::std::string& ImageType_Name(ImageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ImageType_descriptor(), value);
}
inline bool ImageType_Parse(
    const ::std::string& name, ImageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ImageType>(
    ImageType_descriptor(), name, value);
}
// ===================================================================

class LadybugTimeStamp : public ::google::protobuf::Message {
 public:
  LadybugTimeStamp();
  virtual ~LadybugTimeStamp();

  LadybugTimeStamp(const LadybugTimeStamp& from);

  inline LadybugTimeStamp& operator=(const LadybugTimeStamp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LadybugTimeStamp& default_instance();

  void Swap(LadybugTimeStamp* other);

  // implements Message ----------------------------------------------

  LadybugTimeStamp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LadybugTimeStamp& from);
  void MergeFrom(const LadybugTimeStamp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 ulSeconds = 1;
  inline bool has_ulseconds() const;
  inline void clear_ulseconds();
  static const int kUlSecondsFieldNumber = 1;
  inline ::google::protobuf::uint64 ulseconds() const;
  inline void set_ulseconds(::google::protobuf::uint64 value);

  // required uint64 ulMicroSeconds = 2;
  inline bool has_ulmicroseconds() const;
  inline void clear_ulmicroseconds();
  static const int kUlMicroSecondsFieldNumber = 2;
  inline ::google::protobuf::uint64 ulmicroseconds() const;
  inline void set_ulmicroseconds(::google::protobuf::uint64 value);

  // optional uint64 ulCycleSeconds = 3;
  inline bool has_ulcycleseconds() const;
  inline void clear_ulcycleseconds();
  static const int kUlCycleSecondsFieldNumber = 3;
  inline ::google::protobuf::uint64 ulcycleseconds() const;
  inline void set_ulcycleseconds(::google::protobuf::uint64 value);

  // optional uint64 ulCycleCount = 4;
  inline bool has_ulcyclecount() const;
  inline void clear_ulcyclecount();
  static const int kUlCycleCountFieldNumber = 4;
  inline ::google::protobuf::uint64 ulcyclecount() const;
  inline void set_ulcyclecount(::google::protobuf::uint64 value);

  // optional uint64 ulCycleOffset = 5;
  inline bool has_ulcycleoffset() const;
  inline void clear_ulcycleoffset();
  static const int kUlCycleOffsetFieldNumber = 5;
  inline ::google::protobuf::uint64 ulcycleoffset() const;
  inline void set_ulcycleoffset(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:ladybug5_network.LadybugTimeStamp)
 private:
  inline void set_has_ulseconds();
  inline void clear_has_ulseconds();
  inline void set_has_ulmicroseconds();
  inline void clear_has_ulmicroseconds();
  inline void set_has_ulcycleseconds();
  inline void clear_has_ulcycleseconds();
  inline void set_has_ulcyclecount();
  inline void clear_has_ulcyclecount();
  inline void set_has_ulcycleoffset();
  inline void clear_has_ulcycleoffset();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 ulseconds_;
  ::google::protobuf::uint64 ulmicroseconds_;
  ::google::protobuf::uint64 ulcycleseconds_;
  ::google::protobuf::uint64 ulcyclecount_;
  ::google::protobuf::uint64 ulcycleoffset_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_imageMessage_2eproto();
  friend void protobuf_AssignDesc_imageMessage_2eproto();
  friend void protobuf_ShutdownFile_imageMessage_2eproto();

  void InitAsDefaultInstance();
  static LadybugTimeStamp* default_instance_;
};
// -------------------------------------------------------------------

class Image : public ::google::protobuf::Message {
 public:
  Image();
  virtual ~Image();

  Image(const Image& from);

  inline Image& operator=(const Image& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Image& default_instance();

  void Swap(Image* other);

  // implements Message ----------------------------------------------

  Image* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Image& from);
  void MergeFrom(const Image& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 number = 6;
  inline bool has_number() const;
  inline void clear_number();
  static const int kNumberFieldNumber = 6;
  inline ::google::protobuf::int32 number() const;
  inline void set_number(::google::protobuf::int32 value);

  // optional .ladybug5_network.ImageType type = 7;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 7;
  inline ::ladybug5_network::ImageType type() const;
  inline void set_type(::ladybug5_network::ImageType value);

  // optional bytes image = 8;
  inline bool has_image() const;
  inline void clear_image();
  static const int kImageFieldNumber = 8;
  inline const ::std::string& image() const;
  inline void set_image(const ::std::string& value);
  inline void set_image(const char* value);
  inline void set_image(const void* value, size_t size);
  inline ::std::string* mutable_image();
  inline ::std::string* release_image();
  inline void set_allocated_image(::std::string* image);

  // optional uint32 size = 9;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 9;
  inline ::google::protobuf::uint32 size() const;
  inline void set_size(::google::protobuf::uint32 value);

  // optional .ladybug5_network.LadybugTimeStamp time = 10;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 10;
  inline const ::ladybug5_network::LadybugTimeStamp& time() const;
  inline ::ladybug5_network::LadybugTimeStamp* mutable_time();
  inline ::ladybug5_network::LadybugTimeStamp* release_time();
  inline void set_allocated_time(::ladybug5_network::LadybugTimeStamp* time);

  // @@protoc_insertion_point(class_scope:ladybug5_network.Image)
 private:
  inline void set_has_number();
  inline void clear_has_number();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_image();
  inline void clear_has_image();
  inline void set_has_size();
  inline void clear_has_size();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 number_;
  int type_;
  ::std::string* image_;
  ::ladybug5_network::LadybugTimeStamp* time_;
  ::google::protobuf::uint32 size_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_imageMessage_2eproto();
  friend void protobuf_AssignDesc_imageMessage_2eproto();
  friend void protobuf_ShutdownFile_imageMessage_2eproto();

  void InitAsDefaultInstance();
  static Image* default_instance_;
};
// -------------------------------------------------------------------

class ImageMessage : public ::google::protobuf::Message {
 public:
  ImageMessage();
  virtual ~ImageMessage();

  ImageMessage(const ImageMessage& from);

  inline ImageMessage& operator=(const ImageMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ImageMessage& default_instance();

  void Swap(ImageMessage* other);

  // implements Message ----------------------------------------------

  ImageMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ImageMessage& from);
  void MergeFrom(const ImageMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional string email = 3;
  inline bool has_email() const;
  inline void clear_email();
  static const int kEmailFieldNumber = 3;
  inline const ::std::string& email() const;
  inline void set_email(const ::std::string& value);
  inline void set_email(const char* value);
  inline void set_email(const char* value, size_t size);
  inline ::std::string* mutable_email();
  inline ::std::string* release_email();
  inline void set_allocated_email(::std::string* email);

  // repeated .ladybug5_network.Image Images = 4;
  inline int images_size() const;
  inline void clear_images();
  static const int kImagesFieldNumber = 4;
  inline const ::ladybug5_network::Image& images(int index) const;
  inline ::ladybug5_network::Image* mutable_images(int index);
  inline ::ladybug5_network::Image* add_images();
  inline const ::google::protobuf::RepeatedPtrField< ::ladybug5_network::Image >&
      images() const;
  inline ::google::protobuf::RepeatedPtrField< ::ladybug5_network::Image >*
      mutable_images();

  // @@protoc_insertion_point(class_scope:ladybug5_network.ImageMessage)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_email();
  inline void clear_has_email();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::std::string* email_;
  ::google::protobuf::RepeatedPtrField< ::ladybug5_network::Image > images_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_imageMessage_2eproto();
  friend void protobuf_AssignDesc_imageMessage_2eproto();
  friend void protobuf_ShutdownFile_imageMessage_2eproto();

  void InitAsDefaultInstance();
  static ImageMessage* default_instance_;
};
// -------------------------------------------------------------------

class RequestImageMessage : public ::google::protobuf::Message {
 public:
  RequestImageMessage();
  virtual ~RequestImageMessage();

  RequestImageMessage(const RequestImageMessage& from);

  inline RequestImageMessage& operator=(const RequestImageMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestImageMessage& default_instance();

  void Swap(RequestImageMessage* other);

  // implements Message ----------------------------------------------

  RequestImageMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequestImageMessage& from);
  void MergeFrom(const RequestImageMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // repeated .ladybug5_network.ImageType images = 3;
  inline int images_size() const;
  inline void clear_images();
  static const int kImagesFieldNumber = 3;
  inline ::ladybug5_network::ImageType images(int index) const;
  inline void set_images(int index, ::ladybug5_network::ImageType value);
  inline void add_images(::ladybug5_network::ImageType value);
  inline const ::google::protobuf::RepeatedField<int>& images() const;
  inline ::google::protobuf::RepeatedField<int>* mutable_images();

  // @@protoc_insertion_point(class_scope:ladybug5_network.RequestImageMessage)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::RepeatedField<int> images_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_imageMessage_2eproto();
  friend void protobuf_AssignDesc_imageMessage_2eproto();
  friend void protobuf_ShutdownFile_imageMessage_2eproto();

  void InitAsDefaultInstance();
  static RequestImageMessage* default_instance_;
};
// ===================================================================


// ===================================================================

// LadybugTimeStamp

// required uint64 ulSeconds = 1;
inline bool LadybugTimeStamp::has_ulseconds() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LadybugTimeStamp::set_has_ulseconds() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LadybugTimeStamp::clear_has_ulseconds() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LadybugTimeStamp::clear_ulseconds() {
  ulseconds_ = GOOGLE_ULONGLONG(0);
  clear_has_ulseconds();
}
inline ::google::protobuf::uint64 LadybugTimeStamp::ulseconds() const {
  return ulseconds_;
}
inline void LadybugTimeStamp::set_ulseconds(::google::protobuf::uint64 value) {
  set_has_ulseconds();
  ulseconds_ = value;
}

// required uint64 ulMicroSeconds = 2;
inline bool LadybugTimeStamp::has_ulmicroseconds() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LadybugTimeStamp::set_has_ulmicroseconds() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LadybugTimeStamp::clear_has_ulmicroseconds() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LadybugTimeStamp::clear_ulmicroseconds() {
  ulmicroseconds_ = GOOGLE_ULONGLONG(0);
  clear_has_ulmicroseconds();
}
inline ::google::protobuf::uint64 LadybugTimeStamp::ulmicroseconds() const {
  return ulmicroseconds_;
}
inline void LadybugTimeStamp::set_ulmicroseconds(::google::protobuf::uint64 value) {
  set_has_ulmicroseconds();
  ulmicroseconds_ = value;
}

// optional uint64 ulCycleSeconds = 3;
inline bool LadybugTimeStamp::has_ulcycleseconds() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LadybugTimeStamp::set_has_ulcycleseconds() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LadybugTimeStamp::clear_has_ulcycleseconds() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LadybugTimeStamp::clear_ulcycleseconds() {
  ulcycleseconds_ = GOOGLE_ULONGLONG(0);
  clear_has_ulcycleseconds();
}
inline ::google::protobuf::uint64 LadybugTimeStamp::ulcycleseconds() const {
  return ulcycleseconds_;
}
inline void LadybugTimeStamp::set_ulcycleseconds(::google::protobuf::uint64 value) {
  set_has_ulcycleseconds();
  ulcycleseconds_ = value;
}

// optional uint64 ulCycleCount = 4;
inline bool LadybugTimeStamp::has_ulcyclecount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LadybugTimeStamp::set_has_ulcyclecount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LadybugTimeStamp::clear_has_ulcyclecount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LadybugTimeStamp::clear_ulcyclecount() {
  ulcyclecount_ = GOOGLE_ULONGLONG(0);
  clear_has_ulcyclecount();
}
inline ::google::protobuf::uint64 LadybugTimeStamp::ulcyclecount() const {
  return ulcyclecount_;
}
inline void LadybugTimeStamp::set_ulcyclecount(::google::protobuf::uint64 value) {
  set_has_ulcyclecount();
  ulcyclecount_ = value;
}

// optional uint64 ulCycleOffset = 5;
inline bool LadybugTimeStamp::has_ulcycleoffset() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LadybugTimeStamp::set_has_ulcycleoffset() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LadybugTimeStamp::clear_has_ulcycleoffset() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LadybugTimeStamp::clear_ulcycleoffset() {
  ulcycleoffset_ = GOOGLE_ULONGLONG(0);
  clear_has_ulcycleoffset();
}
inline ::google::protobuf::uint64 LadybugTimeStamp::ulcycleoffset() const {
  return ulcycleoffset_;
}
inline void LadybugTimeStamp::set_ulcycleoffset(::google::protobuf::uint64 value) {
  set_has_ulcycleoffset();
  ulcycleoffset_ = value;
}

// -------------------------------------------------------------------

// Image

// optional int32 number = 6;
inline bool Image::has_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Image::set_has_number() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Image::clear_has_number() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Image::clear_number() {
  number_ = 0;
  clear_has_number();
}
inline ::google::protobuf::int32 Image::number() const {
  return number_;
}
inline void Image::set_number(::google::protobuf::int32 value) {
  set_has_number();
  number_ = value;
}

// optional .ladybug5_network.ImageType type = 7;
inline bool Image::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Image::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Image::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Image::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::ladybug5_network::ImageType Image::type() const {
  return static_cast< ::ladybug5_network::ImageType >(type_);
}
inline void Image::set_type(::ladybug5_network::ImageType value) {
  assert(::ladybug5_network::ImageType_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional bytes image = 8;
inline bool Image::has_image() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Image::set_has_image() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Image::clear_has_image() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Image::clear_image() {
  if (image_ != &::google::protobuf::internal::kEmptyString) {
    image_->clear();
  }
  clear_has_image();
}
inline const ::std::string& Image::image() const {
  return *image_;
}
inline void Image::set_image(const ::std::string& value) {
  set_has_image();
  if (image_ == &::google::protobuf::internal::kEmptyString) {
    image_ = new ::std::string;
  }
  image_->assign(value);
}
inline void Image::set_image(const char* value) {
  set_has_image();
  if (image_ == &::google::protobuf::internal::kEmptyString) {
    image_ = new ::std::string;
  }
  image_->assign(value);
}
inline void Image::set_image(const void* value, size_t size) {
  set_has_image();
  if (image_ == &::google::protobuf::internal::kEmptyString) {
    image_ = new ::std::string;
  }
  image_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Image::mutable_image() {
  set_has_image();
  if (image_ == &::google::protobuf::internal::kEmptyString) {
    image_ = new ::std::string;
  }
  return image_;
}
inline ::std::string* Image::release_image() {
  clear_has_image();
  if (image_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = image_;
    image_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Image::set_allocated_image(::std::string* image) {
  if (image_ != &::google::protobuf::internal::kEmptyString) {
    delete image_;
  }
  if (image) {
    set_has_image();
    image_ = image;
  } else {
    clear_has_image();
    image_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 size = 9;
inline bool Image::has_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Image::set_has_size() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Image::clear_has_size() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Image::clear_size() {
  size_ = 0u;
  clear_has_size();
}
inline ::google::protobuf::uint32 Image::size() const {
  return size_;
}
inline void Image::set_size(::google::protobuf::uint32 value) {
  set_has_size();
  size_ = value;
}

// optional .ladybug5_network.LadybugTimeStamp time = 10;
inline bool Image::has_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Image::set_has_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Image::clear_has_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Image::clear_time() {
  if (time_ != NULL) time_->::ladybug5_network::LadybugTimeStamp::Clear();
  clear_has_time();
}
inline const ::ladybug5_network::LadybugTimeStamp& Image::time() const {
  return time_ != NULL ? *time_ : *default_instance_->time_;
}
inline ::ladybug5_network::LadybugTimeStamp* Image::mutable_time() {
  set_has_time();
  if (time_ == NULL) time_ = new ::ladybug5_network::LadybugTimeStamp;
  return time_;
}
inline ::ladybug5_network::LadybugTimeStamp* Image::release_time() {
  clear_has_time();
  ::ladybug5_network::LadybugTimeStamp* temp = time_;
  time_ = NULL;
  return temp;
}
inline void Image::set_allocated_time(::ladybug5_network::LadybugTimeStamp* time) {
  delete time_;
  time_ = time;
  if (time) {
    set_has_time();
  } else {
    clear_has_time();
  }
}

// -------------------------------------------------------------------

// ImageMessage

// required string name = 1;
inline bool ImageMessage::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ImageMessage::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ImageMessage::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ImageMessage::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ImageMessage::name() const {
  return *name_;
}
inline void ImageMessage::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ImageMessage::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ImageMessage::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ImageMessage::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* ImageMessage::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ImageMessage::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 id = 2;
inline bool ImageMessage::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ImageMessage::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ImageMessage::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ImageMessage::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ImageMessage::id() const {
  return id_;
}
inline void ImageMessage::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional string email = 3;
inline bool ImageMessage::has_email() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ImageMessage::set_has_email() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ImageMessage::clear_has_email() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ImageMessage::clear_email() {
  if (email_ != &::google::protobuf::internal::kEmptyString) {
    email_->clear();
  }
  clear_has_email();
}
inline const ::std::string& ImageMessage::email() const {
  return *email_;
}
inline void ImageMessage::set_email(const ::std::string& value) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  email_->assign(value);
}
inline void ImageMessage::set_email(const char* value) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  email_->assign(value);
}
inline void ImageMessage::set_email(const char* value, size_t size) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  email_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ImageMessage::mutable_email() {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  return email_;
}
inline ::std::string* ImageMessage::release_email() {
  clear_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = email_;
    email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ImageMessage::set_allocated_email(::std::string* email) {
  if (email_ != &::google::protobuf::internal::kEmptyString) {
    delete email_;
  }
  if (email) {
    set_has_email();
    email_ = email;
  } else {
    clear_has_email();
    email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .ladybug5_network.Image Images = 4;
inline int ImageMessage::images_size() const {
  return images_.size();
}
inline void ImageMessage::clear_images() {
  images_.Clear();
}
inline const ::ladybug5_network::Image& ImageMessage::images(int index) const {
  return images_.Get(index);
}
inline ::ladybug5_network::Image* ImageMessage::mutable_images(int index) {
  return images_.Mutable(index);
}
inline ::ladybug5_network::Image* ImageMessage::add_images() {
  return images_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ladybug5_network::Image >&
ImageMessage::images() const {
  return images_;
}
inline ::google::protobuf::RepeatedPtrField< ::ladybug5_network::Image >*
ImageMessage::mutable_images() {
  return &images_;
}

// -------------------------------------------------------------------

// RequestImageMessage

// required string name = 1;
inline bool RequestImageMessage::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequestImageMessage::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RequestImageMessage::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RequestImageMessage::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& RequestImageMessage::name() const {
  return *name_;
}
inline void RequestImageMessage::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void RequestImageMessage::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void RequestImageMessage::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RequestImageMessage::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* RequestImageMessage::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RequestImageMessage::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 id = 2;
inline bool RequestImageMessage::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RequestImageMessage::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RequestImageMessage::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RequestImageMessage::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 RequestImageMessage::id() const {
  return id_;
}
inline void RequestImageMessage::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// repeated .ladybug5_network.ImageType images = 3;
inline int RequestImageMessage::images_size() const {
  return images_.size();
}
inline void RequestImageMessage::clear_images() {
  images_.Clear();
}
inline ::ladybug5_network::ImageType RequestImageMessage::images(int index) const {
  return static_cast< ::ladybug5_network::ImageType >(images_.Get(index));
}
inline void RequestImageMessage::set_images(int index, ::ladybug5_network::ImageType value) {
  assert(::ladybug5_network::ImageType_IsValid(value));
  images_.Set(index, value);
}
inline void RequestImageMessage::add_images(::ladybug5_network::ImageType value) {
  assert(::ladybug5_network::ImageType_IsValid(value));
  images_.Add(value);
}
inline const ::google::protobuf::RepeatedField<int>&
RequestImageMessage::images() const {
  return images_;
}
inline ::google::protobuf::RepeatedField<int>*
RequestImageMessage::mutable_images() {
  return &images_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ladybug5_network

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ladybug5_network::ImageType>() {
  return ::ladybug5_network::ImageType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_imageMessage_2eproto__INCLUDED
