// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: imageMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "imageMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ladybug5_network {

namespace {

const ::google::protobuf::Descriptor* LadybugTimeStamp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LadybugTimeStamp_reflection_ = NULL;
const ::google::protobuf::Descriptor* pbImage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pbImage_reflection_ = NULL;
const ::google::protobuf::Descriptor* pbMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pbMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestImageMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestImageMessage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ImageType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_imageMessage_2eproto() {
  protobuf_AddDesc_imageMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "imageMessage.proto");
  GOOGLE_CHECK(file != NULL);
  LadybugTimeStamp_descriptor_ = file->message_type(0);
  static const int LadybugTimeStamp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LadybugTimeStamp, ulseconds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LadybugTimeStamp, ulmicroseconds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LadybugTimeStamp, ulcycleseconds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LadybugTimeStamp, ulcyclecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LadybugTimeStamp, ulcycleoffset_),
  };
  LadybugTimeStamp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LadybugTimeStamp_descriptor_,
      LadybugTimeStamp::default_instance_,
      LadybugTimeStamp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LadybugTimeStamp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LadybugTimeStamp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LadybugTimeStamp));
  pbImage_descriptor_ = file->message_type(1);
  static const int pbImage_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbImage, number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbImage, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbImage, image_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbImage, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbImage, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbImage, name_),
  };
  pbImage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pbImage_descriptor_,
      pbImage::default_instance_,
      pbImage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbImage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbImage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pbImage));
  pbMessage_descriptor_ = file->message_type(2);
  static const int pbMessage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbMessage, camera_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbMessage, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbMessage, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbMessage, images_),
  };
  pbMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pbMessage_descriptor_,
      pbMessage::default_instance_,
      pbMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pbMessage));
  RequestImageMessage_descriptor_ = file->message_type(3);
  static const int RequestImageMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestImageMessage, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestImageMessage, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestImageMessage, images_),
  };
  RequestImageMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestImageMessage_descriptor_,
      RequestImageMessage::default_instance_,
      RequestImageMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestImageMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestImageMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestImageMessage));
  ImageType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_imageMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LadybugTimeStamp_descriptor_, &LadybugTimeStamp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pbImage_descriptor_, &pbImage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pbMessage_descriptor_, &pbMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestImageMessage_descriptor_, &RequestImageMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_imageMessage_2eproto() {
  delete LadybugTimeStamp::default_instance_;
  delete LadybugTimeStamp_reflection_;
  delete pbImage::default_instance_;
  delete pbImage_reflection_;
  delete pbMessage::default_instance_;
  delete pbMessage_reflection_;
  delete RequestImageMessage::default_instance_;
  delete RequestImageMessage_reflection_;
}

void protobuf_AddDesc_imageMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022imageMessage.proto\022\020ladybug5_network\"\202"
    "\001\n\020LadybugTimeStamp\022\021\n\tulSeconds\030\001 \002(\004\022\026"
    "\n\016ulMicroSeconds\030\002 \002(\004\022\026\n\016ulCycleSeconds"
    "\030\003 \001(\004\022\024\n\014ulCycleCount\030\004 \001(\004\022\025\n\rulCycleO"
    "ffset\030\005 \001(\004\"\241\001\n\007pbImage\022\016\n\006number\030\006 \001(\005\022"
    ")\n\004type\030\007 \001(\0162\033.ladybug5_network.ImageTy"
    "pe\022\r\n\005image\030\010 \001(\014\022\014\n\004size\030\t \001(\r\0220\n\004time\030"
    "\n \001(\0132\".ladybug5_network.LadybugTimeStam"
    "p\022\014\n\004name\030\013 \001(\t\"`\n\tpbMessage\022\016\n\006camera\030\001"
    " \002(\t\022\n\n\002id\030\002 \001(\005\022\014\n\004name\030\003 \001(\t\022)\n\006Images"
    "\030\004 \003(\0132\031.ladybug5_network.pbImage\"\\\n\023Req"
    "uestImageMessage\022\014\n\004name\030\001 \002(\t\022\n\n\002id\030\002 \001"
    "(\005\022+\n\006images\030\003 \001(\0162\033.ladybug5_network.Im"
    "ageType*\201\004\n\tImageType\022\024\n\020LADYBUG_RAW_CAM"
    "0\020\001\022\024\n\020LADYBUG_RAW_CAM1\020\002\022\024\n\020LADYBUG_RAW"
    "_CAM2\020\004\022\024\n\020LADYBUG_RAW_CAM3\020\010\022\024\n\020LADYBUG"
    "_RAW_CAM4\020\020\022\024\n\020LADYBUG_RAW_CAM5\020 \022\032\n\026LAD"
    "YBUG_ALL_RAW_IMAGES\020\?\022\032\n\026LADYBUG_RECTIFI"
    "ED_CAM0\020@\022\033\n\026LADYBUG_RECTIFIED_CAM1\020\200\001\022\033"
    "\n\026LADYBUG_RECTIFIED_CAM2\020\200\002\022\033\n\026LADYBUG_R"
    "ECTIFIED_CAM3\020\200\004\022\033\n\026LADYBUG_RECTIFIED_CA"
    "M4\020\200\010\022\033\n\026LADYBUG_RECTIFIED_CAM5\020\200\020\022!\n\034LA"
    "DYBUG_ALL_RECTIFIED_IMAGES\020\300\037\022\026\n\021LADYBUG"
    "_PANORAMIC\020\200 \022\021\n\014LADYBUG_DOME\020\200@\022\027\n\021LADY"
    "BUG_SPHERICAL\020\200\200\001\022\036\n\030LADYBUG_ALL_CAMERAS"
    "_VIEW\020\200\200\002\022 \n\030LADYBUG_ALL_OUTPUT_IMAGE\020\377\377"
    "\377\377\007", 1043);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "imageMessage.proto", &protobuf_RegisterTypes);
  LadybugTimeStamp::default_instance_ = new LadybugTimeStamp();
  pbImage::default_instance_ = new pbImage();
  pbMessage::default_instance_ = new pbMessage();
  RequestImageMessage::default_instance_ = new RequestImageMessage();
  LadybugTimeStamp::default_instance_->InitAsDefaultInstance();
  pbImage::default_instance_->InitAsDefaultInstance();
  pbMessage::default_instance_->InitAsDefaultInstance();
  RequestImageMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_imageMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_imageMessage_2eproto {
  StaticDescriptorInitializer_imageMessage_2eproto() {
    protobuf_AddDesc_imageMessage_2eproto();
  }
} static_descriptor_initializer_imageMessage_2eproto_;
const ::google::protobuf::EnumDescriptor* ImageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImageType_descriptor_;
}
bool ImageType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 63:
    case 64:
    case 128:
    case 256:
    case 512:
    case 1024:
    case 2048:
    case 4032:
    case 4096:
    case 8192:
    case 16384:
    case 32768:
    case 2147483647:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int LadybugTimeStamp::kUlSecondsFieldNumber;
const int LadybugTimeStamp::kUlMicroSecondsFieldNumber;
const int LadybugTimeStamp::kUlCycleSecondsFieldNumber;
const int LadybugTimeStamp::kUlCycleCountFieldNumber;
const int LadybugTimeStamp::kUlCycleOffsetFieldNumber;
#endif  // !_MSC_VER

LadybugTimeStamp::LadybugTimeStamp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LadybugTimeStamp::InitAsDefaultInstance() {
}

LadybugTimeStamp::LadybugTimeStamp(const LadybugTimeStamp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LadybugTimeStamp::SharedCtor() {
  _cached_size_ = 0;
  ulseconds_ = GOOGLE_ULONGLONG(0);
  ulmicroseconds_ = GOOGLE_ULONGLONG(0);
  ulcycleseconds_ = GOOGLE_ULONGLONG(0);
  ulcyclecount_ = GOOGLE_ULONGLONG(0);
  ulcycleoffset_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LadybugTimeStamp::~LadybugTimeStamp() {
  SharedDtor();
}

void LadybugTimeStamp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LadybugTimeStamp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LadybugTimeStamp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LadybugTimeStamp_descriptor_;
}

const LadybugTimeStamp& LadybugTimeStamp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_imageMessage_2eproto();
  return *default_instance_;
}

LadybugTimeStamp* LadybugTimeStamp::default_instance_ = NULL;

LadybugTimeStamp* LadybugTimeStamp::New() const {
  return new LadybugTimeStamp;
}

void LadybugTimeStamp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ulseconds_ = GOOGLE_ULONGLONG(0);
    ulmicroseconds_ = GOOGLE_ULONGLONG(0);
    ulcycleseconds_ = GOOGLE_ULONGLONG(0);
    ulcyclecount_ = GOOGLE_ULONGLONG(0);
    ulcycleoffset_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LadybugTimeStamp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 ulSeconds = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ulseconds_)));
          set_has_ulseconds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ulMicroSeconds;
        break;
      }

      // required uint64 ulMicroSeconds = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ulMicroSeconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ulmicroseconds_)));
          set_has_ulmicroseconds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ulCycleSeconds;
        break;
      }

      // optional uint64 ulCycleSeconds = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ulCycleSeconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ulcycleseconds_)));
          set_has_ulcycleseconds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ulCycleCount;
        break;
      }

      // optional uint64 ulCycleCount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ulCycleCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ulcyclecount_)));
          set_has_ulcyclecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ulCycleOffset;
        break;
      }

      // optional uint64 ulCycleOffset = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ulCycleOffset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ulcycleoffset_)));
          set_has_ulcycleoffset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LadybugTimeStamp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 ulSeconds = 1;
  if (has_ulseconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->ulseconds(), output);
  }

  // required uint64 ulMicroSeconds = 2;
  if (has_ulmicroseconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->ulmicroseconds(), output);
  }

  // optional uint64 ulCycleSeconds = 3;
  if (has_ulcycleseconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->ulcycleseconds(), output);
  }

  // optional uint64 ulCycleCount = 4;
  if (has_ulcyclecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->ulcyclecount(), output);
  }

  // optional uint64 ulCycleOffset = 5;
  if (has_ulcycleoffset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->ulcycleoffset(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LadybugTimeStamp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 ulSeconds = 1;
  if (has_ulseconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->ulseconds(), target);
  }

  // required uint64 ulMicroSeconds = 2;
  if (has_ulmicroseconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->ulmicroseconds(), target);
  }

  // optional uint64 ulCycleSeconds = 3;
  if (has_ulcycleseconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->ulcycleseconds(), target);
  }

  // optional uint64 ulCycleCount = 4;
  if (has_ulcyclecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->ulcyclecount(), target);
  }

  // optional uint64 ulCycleOffset = 5;
  if (has_ulcycleoffset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->ulcycleoffset(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LadybugTimeStamp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 ulSeconds = 1;
    if (has_ulseconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ulseconds());
    }

    // required uint64 ulMicroSeconds = 2;
    if (has_ulmicroseconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ulmicroseconds());
    }

    // optional uint64 ulCycleSeconds = 3;
    if (has_ulcycleseconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ulcycleseconds());
    }

    // optional uint64 ulCycleCount = 4;
    if (has_ulcyclecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ulcyclecount());
    }

    // optional uint64 ulCycleOffset = 5;
    if (has_ulcycleoffset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ulcycleoffset());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LadybugTimeStamp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LadybugTimeStamp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LadybugTimeStamp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LadybugTimeStamp::MergeFrom(const LadybugTimeStamp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ulseconds()) {
      set_ulseconds(from.ulseconds());
    }
    if (from.has_ulmicroseconds()) {
      set_ulmicroseconds(from.ulmicroseconds());
    }
    if (from.has_ulcycleseconds()) {
      set_ulcycleseconds(from.ulcycleseconds());
    }
    if (from.has_ulcyclecount()) {
      set_ulcyclecount(from.ulcyclecount());
    }
    if (from.has_ulcycleoffset()) {
      set_ulcycleoffset(from.ulcycleoffset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LadybugTimeStamp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LadybugTimeStamp::CopyFrom(const LadybugTimeStamp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LadybugTimeStamp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void LadybugTimeStamp::Swap(LadybugTimeStamp* other) {
  if (other != this) {
    std::swap(ulseconds_, other->ulseconds_);
    std::swap(ulmicroseconds_, other->ulmicroseconds_);
    std::swap(ulcycleseconds_, other->ulcycleseconds_);
    std::swap(ulcyclecount_, other->ulcyclecount_);
    std::swap(ulcycleoffset_, other->ulcycleoffset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LadybugTimeStamp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LadybugTimeStamp_descriptor_;
  metadata.reflection = LadybugTimeStamp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pbImage::kNumberFieldNumber;
const int pbImage::kTypeFieldNumber;
const int pbImage::kImageFieldNumber;
const int pbImage::kSizeFieldNumber;
const int pbImage::kTimeFieldNumber;
const int pbImage::kNameFieldNumber;
#endif  // !_MSC_VER

pbImage::pbImage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pbImage::InitAsDefaultInstance() {
  time_ = const_cast< ::ladybug5_network::LadybugTimeStamp*>(&::ladybug5_network::LadybugTimeStamp::default_instance());
}

pbImage::pbImage(const pbImage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pbImage::SharedCtor() {
  _cached_size_ = 0;
  number_ = 0;
  type_ = 1;
  image_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  size_ = 0u;
  time_ = NULL;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pbImage::~pbImage() {
  SharedDtor();
}

void pbImage::SharedDtor() {
  if (image_ != &::google::protobuf::internal::kEmptyString) {
    delete image_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete time_;
  }
}

void pbImage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pbImage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pbImage_descriptor_;
}

const pbImage& pbImage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_imageMessage_2eproto();
  return *default_instance_;
}

pbImage* pbImage::default_instance_ = NULL;

pbImage* pbImage::New() const {
  return new pbImage;
}

void pbImage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    number_ = 0;
    type_ = 1;
    if (has_image()) {
      if (image_ != &::google::protobuf::internal::kEmptyString) {
        image_->clear();
      }
    }
    size_ = 0u;
    if (has_time()) {
      if (time_ != NULL) time_->::ladybug5_network::LadybugTimeStamp::Clear();
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pbImage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 number = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &number_)));
          set_has_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_type;
        break;
      }

      // optional .ladybug5_network.ImageType type = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ladybug5_network::ImageType_IsValid(value)) {
            set_type(static_cast< ::ladybug5_network::ImageType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_image;
        break;
      }

      // optional bytes image = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_image:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_image()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_size;
        break;
      }

      // optional uint32 size = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_time;
        break;
      }

      // optional .ladybug5_network.LadybugTimeStamp time = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_time()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_name;
        break;
      }

      // optional string name = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pbImage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 number = 6;
  if (has_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->number(), output);
  }

  // optional .ladybug5_network.ImageType type = 7;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->type(), output);
  }

  // optional bytes image = 8;
  if (has_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      8, this->image(), output);
  }

  // optional uint32 size = 9;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->size(), output);
  }

  // optional .ladybug5_network.LadybugTimeStamp time = 10;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->time(), output);
  }

  // optional string name = 11;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pbImage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 number = 6;
  if (has_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->number(), target);
  }

  // optional .ladybug5_network.ImageType type = 7;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->type(), target);
  }

  // optional bytes image = 8;
  if (has_image()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->image(), target);
  }

  // optional uint32 size = 9;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->size(), target);
  }

  // optional .ladybug5_network.LadybugTimeStamp time = 10;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->time(), target);
  }

  // optional string name = 11;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pbImage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 number = 6;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->number());
    }

    // optional .ladybug5_network.ImageType type = 7;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional bytes image = 8;
    if (has_image()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->image());
    }

    // optional uint32 size = 9;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->size());
    }

    // optional .ladybug5_network.LadybugTimeStamp time = 10;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->time());
    }

    // optional string name = 11;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pbImage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pbImage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pbImage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pbImage::MergeFrom(const pbImage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_number()) {
      set_number(from.number());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_image()) {
      set_image(from.image());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_time()) {
      mutable_time()->::ladybug5_network::LadybugTimeStamp::MergeFrom(from.time());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pbImage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pbImage::CopyFrom(const pbImage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pbImage::IsInitialized() const {

  if (has_time()) {
    if (!this->time().IsInitialized()) return false;
  }
  return true;
}

void pbImage::Swap(pbImage* other) {
  if (other != this) {
    std::swap(number_, other->number_);
    std::swap(type_, other->type_);
    std::swap(image_, other->image_);
    std::swap(size_, other->size_);
    std::swap(time_, other->time_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pbImage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pbImage_descriptor_;
  metadata.reflection = pbImage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pbMessage::kCameraFieldNumber;
const int pbMessage::kIdFieldNumber;
const int pbMessage::kNameFieldNumber;
const int pbMessage::kImagesFieldNumber;
#endif  // !_MSC_VER

pbMessage::pbMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pbMessage::InitAsDefaultInstance() {
}

pbMessage::pbMessage(const pbMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pbMessage::SharedCtor() {
  _cached_size_ = 0;
  camera_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pbMessage::~pbMessage() {
  SharedDtor();
}

void pbMessage::SharedDtor() {
  if (camera_ != &::google::protobuf::internal::kEmptyString) {
    delete camera_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void pbMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pbMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pbMessage_descriptor_;
}

const pbMessage& pbMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_imageMessage_2eproto();
  return *default_instance_;
}

pbMessage* pbMessage::default_instance_ = NULL;

pbMessage* pbMessage::New() const {
  return new pbMessage;
}

void pbMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_camera()) {
      if (camera_ != &::google::protobuf::internal::kEmptyString) {
        camera_->clear();
      }
    }
    id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  images_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pbMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string camera = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_camera()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->camera().data(), this->camera().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_Images;
        break;
      }

      // repeated .ladybug5_network.pbImage Images = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Images:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_images()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_Images;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pbMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string camera = 1;
  if (has_camera()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->camera().data(), this->camera().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->camera(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // repeated .ladybug5_network.pbImage Images = 4;
  for (int i = 0; i < this->images_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->images(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pbMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string camera = 1;
  if (has_camera()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->camera().data(), this->camera().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->camera(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // repeated .ladybug5_network.pbImage Images = 4;
  for (int i = 0; i < this->images_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->images(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pbMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string camera = 1;
    if (has_camera()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->camera());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  // repeated .ladybug5_network.pbImage Images = 4;
  total_size += 1 * this->images_size();
  for (int i = 0; i < this->images_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->images(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pbMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pbMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pbMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pbMessage::MergeFrom(const pbMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  images_.MergeFrom(from.images_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_camera()) {
      set_camera(from.camera());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pbMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pbMessage::CopyFrom(const pbMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pbMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < images_size(); i++) {
    if (!this->images(i).IsInitialized()) return false;
  }
  return true;
}

void pbMessage::Swap(pbMessage* other) {
  if (other != this) {
    std::swap(camera_, other->camera_);
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    images_.Swap(&other->images_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pbMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pbMessage_descriptor_;
  metadata.reflection = pbMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestImageMessage::kNameFieldNumber;
const int RequestImageMessage::kIdFieldNumber;
const int RequestImageMessage::kImagesFieldNumber;
#endif  // !_MSC_VER

RequestImageMessage::RequestImageMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestImageMessage::InitAsDefaultInstance() {
}

RequestImageMessage::RequestImageMessage(const RequestImageMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestImageMessage::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  id_ = 0;
  images_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestImageMessage::~RequestImageMessage() {
  SharedDtor();
}

void RequestImageMessage::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void RequestImageMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestImageMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestImageMessage_descriptor_;
}

const RequestImageMessage& RequestImageMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_imageMessage_2eproto();
  return *default_instance_;
}

RequestImageMessage* RequestImageMessage::default_instance_ = NULL;

RequestImageMessage* RequestImageMessage::New() const {
  return new RequestImageMessage;
}

void RequestImageMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    id_ = 0;
    images_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestImageMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_images;
        break;
      }

      // optional .ladybug5_network.ImageType images = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_images:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ladybug5_network::ImageType_IsValid(value)) {
            set_images(static_cast< ::ladybug5_network::ImageType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestImageMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // optional .ladybug5_network.ImageType images = 3;
  if (has_images()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->images(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestImageMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // optional .ladybug5_network.ImageType images = 3;
  if (has_images()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->images(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestImageMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional .ladybug5_network.ImageType images = 3;
    if (has_images()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->images());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestImageMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestImageMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestImageMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestImageMessage::MergeFrom(const RequestImageMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_images()) {
      set_images(from.images());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestImageMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestImageMessage::CopyFrom(const RequestImageMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestImageMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RequestImageMessage::Swap(RequestImageMessage* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(id_, other->id_);
    std::swap(images_, other->images_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestImageMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestImageMessage_descriptor_;
  metadata.reflection = RequestImageMessage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ladybug5_network

// @@protoc_insertion_point(global_scope)
