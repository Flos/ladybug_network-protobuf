// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: imageMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "imageMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ladybug5_network {

namespace {

const ::google::protobuf::Descriptor* LadybugTimeStamp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LadybugTimeStamp_reflection_ = NULL;
const ::google::protobuf::Descriptor* pbDisortion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pbDisortion_reflection_ = NULL;
const ::google::protobuf::Descriptor* pbPosition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pbPosition_reflection_ = NULL;
const ::google::protobuf::Descriptor* pbFloatTriblet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pbFloatTriblet_reflection_ = NULL;
const ::google::protobuf::Descriptor* pbImage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pbImage_reflection_ = NULL;
const ::google::protobuf::Descriptor* pbSensor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pbSensor_reflection_ = NULL;
const ::google::protobuf::Descriptor* pbMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pbMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_start_msg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_start_msg_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_reply_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ImageType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* command_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_imageMessage_2eproto() {
  protobuf_AddDesc_imageMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "imageMessage.proto");
  GOOGLE_CHECK(file != NULL);
  LadybugTimeStamp_descriptor_ = file->message_type(0);
  static const int LadybugTimeStamp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LadybugTimeStamp, ulseconds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LadybugTimeStamp, ulmicroseconds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LadybugTimeStamp, ulcycleseconds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LadybugTimeStamp, ulcyclecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LadybugTimeStamp, ulcycleoffset_),
  };
  LadybugTimeStamp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LadybugTimeStamp_descriptor_,
      LadybugTimeStamp::default_instance_,
      LadybugTimeStamp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LadybugTimeStamp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LadybugTimeStamp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LadybugTimeStamp));
  pbDisortion_descriptor_ = file->message_type(1);
  static const int pbDisortion_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbDisortion, focalx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbDisortion, focaly_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbDisortion, centerx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbDisortion, centery_),
  };
  pbDisortion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pbDisortion_descriptor_,
      pbDisortion::default_instance_,
      pbDisortion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbDisortion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbDisortion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pbDisortion));
  pbPosition_descriptor_ = file->message_type(2);
  static const int pbPosition_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbPosition, rx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbPosition, ry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbPosition, rz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbPosition, tx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbPosition, ty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbPosition, tz_),
  };
  pbPosition_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pbPosition_descriptor_,
      pbPosition::default_instance_,
      pbPosition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbPosition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbPosition, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pbPosition));
  pbFloatTriblet_descriptor_ = file->message_type(3);
  static const int pbFloatTriblet_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbFloatTriblet, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbFloatTriblet, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbFloatTriblet, z_),
  };
  pbFloatTriblet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pbFloatTriblet_descriptor_,
      pbFloatTriblet::default_instance_,
      pbFloatTriblet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbFloatTriblet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbFloatTriblet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pbFloatTriblet));
  pbImage_descriptor_ = file->message_type(4);
  static const int pbImage_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbImage, number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbImage, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbImage, image_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbImage, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbImage, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbImage, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbImage, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbImage, packages_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbImage, distortion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbImage, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbImage, bayer_encoding_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbImage, color_encoding_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbImage, border_top_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbImage, border_bottem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbImage, border_left_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbImage, border_right_),
  };
  pbImage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pbImage_descriptor_,
      pbImage::default_instance_,
      pbImage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbImage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbImage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pbImage));
  pbSensor_descriptor_ = file->message_type(5);
  static const int pbSensor_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbSensor, temperature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbSensor, barometer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbSensor, humidity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbSensor, compass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbSensor, accelerometer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbSensor, gyroscope_),
  };
  pbSensor_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pbSensor_descriptor_,
      pbSensor::default_instance_,
      pbSensor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbSensor, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbSensor, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pbSensor));
  pbMessage_descriptor_ = file->message_type(6);
  static const int pbMessage_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbMessage, camera_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbMessage, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbMessage, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbMessage, images_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbMessage, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbMessage, sensors_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbMessage, serial_number_),
  };
  pbMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pbMessage_descriptor_,
      pbMessage::default_instance_,
      pbMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pbMessage));
  pb_start_msg_descriptor_ = file->message_type(7);
  static const int pb_start_msg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_start_msg, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_start_msg, command_),
  };
  pb_start_msg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_start_msg_descriptor_,
      pb_start_msg::default_instance_,
      pb_start_msg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_start_msg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_start_msg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_start_msg));
  pb_reply_descriptor_ = file->message_type(8);
  static const int pb_reply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_reply, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_reply, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_reply, start_),
  };
  pb_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_reply_descriptor_,
      pb_reply::default_instance_,
      pb_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_reply));
  ImageType_descriptor_ = file->enum_type(0);
  command_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_imageMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LadybugTimeStamp_descriptor_, &LadybugTimeStamp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pbDisortion_descriptor_, &pbDisortion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pbPosition_descriptor_, &pbPosition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pbFloatTriblet_descriptor_, &pbFloatTriblet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pbImage_descriptor_, &pbImage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pbSensor_descriptor_, &pbSensor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pbMessage_descriptor_, &pbMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_start_msg_descriptor_, &pb_start_msg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_reply_descriptor_, &pb_reply::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_imageMessage_2eproto() {
  delete LadybugTimeStamp::default_instance_;
  delete LadybugTimeStamp_reflection_;
  delete pbDisortion::default_instance_;
  delete pbDisortion_reflection_;
  delete pbPosition::default_instance_;
  delete pbPosition_reflection_;
  delete pbFloatTriblet::default_instance_;
  delete pbFloatTriblet_reflection_;
  delete pbImage::default_instance_;
  delete pbImage_reflection_;
  delete pbSensor::default_instance_;
  delete pbSensor_reflection_;
  delete pbMessage::default_instance_;
  delete pbMessage_reflection_;
  delete pb_start_msg::default_instance_;
  delete pb_start_msg_reflection_;
  delete pb_reply::default_instance_;
  delete pb_reply_reflection_;
}

void protobuf_AddDesc_imageMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022imageMessage.proto\022\020ladybug5_network\"\202"
    "\001\n\020LadybugTimeStamp\022\021\n\tulSeconds\030\001 \002(\004\022\026"
    "\n\016ulMicroSeconds\030\002 \002(\004\022\026\n\016ulCycleSeconds"
    "\030\003 \001(\004\022\024\n\014ulCycleCount\030\004 \001(\004\022\025\n\rulCycleO"
    "ffset\030\005 \001(\004\"O\n\013pbDisortion\022\016\n\006focalX\030\001 \001"
    "(\001\022\016\n\006focalY\030\002 \001(\001\022\017\n\007centerX\030\003 \001(\001\022\017\n\007c"
    "enterY\030\004 \001(\001\"T\n\npbPosition\022\n\n\002Rx\030\001 \002(\001\022\n"
    "\n\002Ry\030\002 \002(\001\022\n\n\002Rz\030\003 \002(\001\022\n\n\002Tx\030\004 \002(\001\022\n\n\002Ty"
    "\030\005 \002(\001\022\n\n\002Tz\030\006 \002(\001\"1\n\016pbFloatTriblet\022\t\n\001"
    "x\030\001 \002(\002\022\t\n\001y\030\002 \002(\002\022\t\n\001Z\030\003 \002(\002\"\211\003\n\007pbImag"
    "e\022\016\n\006number\030\006 \001(\005\022)\n\004type\030\007 \001(\0162\033.ladybu"
    "g5_network.ImageType\022\r\n\005image\030\010 \001(\014\022\014\n\004s"
    "ize\030\t \001(\r\022\014\n\004name\030\013 \001(\t\022\016\n\006height\030\014 \001(\r\022"
    "\r\n\005width\030\r \001(\r\022\020\n\010packages\030\016 \001(\r\0221\n\ndist"
    "ortion\030\017 \001(\0132\035.ladybug5_network.pbDisort"
    "ion\022.\n\010position\030\020 \001(\0132\034.ladybug5_network"
    ".pbPosition\022\026\n\016bayer_encoding\030\021 \001(\t\022\026\n\016c"
    "olor_encoding\030\022 \001(\t\022\022\n\nborder_top\030\023 \001(\r\022"
    "\025\n\rborder_bottem\030\024 \001(\r\022\023\n\013border_left\030\025 "
    "\001(\r\022\024\n\014border_right\030\026 \001(\r\"\345\001\n\010pbSensor\022\023"
    "\n\013temperature\030\001 \001(\r\022\021\n\tbarometer\030\002 \001(\r\022\020"
    "\n\010humidity\030\003 \001(\r\0221\n\007compass\030\004 \001(\0132 .lady"
    "bug5_network.pbFloatTriblet\0227\n\raccelerom"
    "eter\030\005 \001(\0132 .ladybug5_network.pbFloatTri"
    "blet\0223\n\tgyroscope\030\006 \001(\0132 .ladybug5_netwo"
    "rk.pbFloatTriblet\"\326\001\n\tpbMessage\022\016\n\006camer"
    "a\030\001 \002(\t\022\n\n\002id\030\002 \002(\005\022\014\n\004name\030\003 \001(\t\022)\n\006Ima"
    "ges\030\004 \003(\0132\031.ladybug5_network.pbImage\0220\n\004"
    "time\030\005 \002(\0132\".ladybug5_network.LadybugTim"
    "eStamp\022+\n\007sensors\030\006 \001(\0132\032.ladybug5_netwo"
    "rk.pbSensor\022\025\n\rserial_number\030\007 \001(\t\"H\n\014pb"
    "_start_msg\022\014\n\004name\030\001 \002(\t\022*\n\007command\030\002 \001("
    "\0162\031.ladybug5_network.command\"X\n\010pb_reply"
    "\022\017\n\007success\030\001 \002(\010\022\014\n\004info\030\002 \001(\t\022-\n\005start"
    "\030\003 \001(\0132\036.ladybug5_network.pb_start_msg*\201"
    "\004\n\tImageType\022\024\n\020LADYBUG_RAW_CAM0\020\001\022\024\n\020LA"
    "DYBUG_RAW_CAM1\020\002\022\024\n\020LADYBUG_RAW_CAM2\020\004\022\024"
    "\n\020LADYBUG_RAW_CAM3\020\010\022\024\n\020LADYBUG_RAW_CAM4"
    "\020\020\022\024\n\020LADYBUG_RAW_CAM5\020 \022\032\n\026LADYBUG_ALL_"
    "RAW_IMAGES\020\?\022\032\n\026LADYBUG_RECTIFIED_CAM0\020@"
    "\022\033\n\026LADYBUG_RECTIFIED_CAM1\020\200\001\022\033\n\026LADYBUG"
    "_RECTIFIED_CAM2\020\200\002\022\033\n\026LADYBUG_RECTIFIED_"
    "CAM3\020\200\004\022\033\n\026LADYBUG_RECTIFIED_CAM4\020\200\010\022\033\n\026"
    "LADYBUG_RECTIFIED_CAM5\020\200\020\022!\n\034LADYBUG_ALL"
    "_RECTIFIED_IMAGES\020\300\037\022\026\n\021LADYBUG_PANORAMI"
    "C\020\200 \022\021\n\014LADYBUG_DOME\020\200@\022\027\n\021LADYBUG_SPHER"
    "ICAL\020\200\200\001\022\036\n\030LADYBUG_ALL_CAMERAS_VIEW\020\200\200\002"
    "\022 \n\030LADYBUG_ALL_OUTPUT_IMAGE\020\377\377\377\377\007*\"\n\007co"
    "mmand\022\t\n\005START\020\001\022\014\n\010DONTSAVE\020\010", 1950);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "imageMessage.proto", &protobuf_RegisterTypes);
  LadybugTimeStamp::default_instance_ = new LadybugTimeStamp();
  pbDisortion::default_instance_ = new pbDisortion();
  pbPosition::default_instance_ = new pbPosition();
  pbFloatTriblet::default_instance_ = new pbFloatTriblet();
  pbImage::default_instance_ = new pbImage();
  pbSensor::default_instance_ = new pbSensor();
  pbMessage::default_instance_ = new pbMessage();
  pb_start_msg::default_instance_ = new pb_start_msg();
  pb_reply::default_instance_ = new pb_reply();
  LadybugTimeStamp::default_instance_->InitAsDefaultInstance();
  pbDisortion::default_instance_->InitAsDefaultInstance();
  pbPosition::default_instance_->InitAsDefaultInstance();
  pbFloatTriblet::default_instance_->InitAsDefaultInstance();
  pbImage::default_instance_->InitAsDefaultInstance();
  pbSensor::default_instance_->InitAsDefaultInstance();
  pbMessage::default_instance_->InitAsDefaultInstance();
  pb_start_msg::default_instance_->InitAsDefaultInstance();
  pb_reply::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_imageMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_imageMessage_2eproto {
  StaticDescriptorInitializer_imageMessage_2eproto() {
    protobuf_AddDesc_imageMessage_2eproto();
  }
} static_descriptor_initializer_imageMessage_2eproto_;
const ::google::protobuf::EnumDescriptor* ImageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImageType_descriptor_;
}
bool ImageType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 63:
    case 64:
    case 128:
    case 256:
    case 512:
    case 1024:
    case 2048:
    case 4032:
    case 4096:
    case 8192:
    case 16384:
    case 32768:
    case 2147483647:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* command_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return command_descriptor_;
}
bool command_IsValid(int value) {
  switch(value) {
    case 1:
    case 8:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int LadybugTimeStamp::kUlSecondsFieldNumber;
const int LadybugTimeStamp::kUlMicroSecondsFieldNumber;
const int LadybugTimeStamp::kUlCycleSecondsFieldNumber;
const int LadybugTimeStamp::kUlCycleCountFieldNumber;
const int LadybugTimeStamp::kUlCycleOffsetFieldNumber;
#endif  // !_MSC_VER

LadybugTimeStamp::LadybugTimeStamp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LadybugTimeStamp::InitAsDefaultInstance() {
}

LadybugTimeStamp::LadybugTimeStamp(const LadybugTimeStamp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LadybugTimeStamp::SharedCtor() {
  _cached_size_ = 0;
  ulseconds_ = GOOGLE_ULONGLONG(0);
  ulmicroseconds_ = GOOGLE_ULONGLONG(0);
  ulcycleseconds_ = GOOGLE_ULONGLONG(0);
  ulcyclecount_ = GOOGLE_ULONGLONG(0);
  ulcycleoffset_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LadybugTimeStamp::~LadybugTimeStamp() {
  SharedDtor();
}

void LadybugTimeStamp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LadybugTimeStamp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LadybugTimeStamp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LadybugTimeStamp_descriptor_;
}

const LadybugTimeStamp& LadybugTimeStamp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_imageMessage_2eproto();
  return *default_instance_;
}

LadybugTimeStamp* LadybugTimeStamp::default_instance_ = NULL;

LadybugTimeStamp* LadybugTimeStamp::New() const {
  return new LadybugTimeStamp;
}

void LadybugTimeStamp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ulseconds_ = GOOGLE_ULONGLONG(0);
    ulmicroseconds_ = GOOGLE_ULONGLONG(0);
    ulcycleseconds_ = GOOGLE_ULONGLONG(0);
    ulcyclecount_ = GOOGLE_ULONGLONG(0);
    ulcycleoffset_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LadybugTimeStamp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 ulSeconds = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ulseconds_)));
          set_has_ulseconds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ulMicroSeconds;
        break;
      }

      // required uint64 ulMicroSeconds = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ulMicroSeconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ulmicroseconds_)));
          set_has_ulmicroseconds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ulCycleSeconds;
        break;
      }

      // optional uint64 ulCycleSeconds = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ulCycleSeconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ulcycleseconds_)));
          set_has_ulcycleseconds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ulCycleCount;
        break;
      }

      // optional uint64 ulCycleCount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ulCycleCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ulcyclecount_)));
          set_has_ulcyclecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ulCycleOffset;
        break;
      }

      // optional uint64 ulCycleOffset = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ulCycleOffset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ulcycleoffset_)));
          set_has_ulcycleoffset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LadybugTimeStamp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 ulSeconds = 1;
  if (has_ulseconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->ulseconds(), output);
  }

  // required uint64 ulMicroSeconds = 2;
  if (has_ulmicroseconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->ulmicroseconds(), output);
  }

  // optional uint64 ulCycleSeconds = 3;
  if (has_ulcycleseconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->ulcycleseconds(), output);
  }

  // optional uint64 ulCycleCount = 4;
  if (has_ulcyclecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->ulcyclecount(), output);
  }

  // optional uint64 ulCycleOffset = 5;
  if (has_ulcycleoffset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->ulcycleoffset(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LadybugTimeStamp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 ulSeconds = 1;
  if (has_ulseconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->ulseconds(), target);
  }

  // required uint64 ulMicroSeconds = 2;
  if (has_ulmicroseconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->ulmicroseconds(), target);
  }

  // optional uint64 ulCycleSeconds = 3;
  if (has_ulcycleseconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->ulcycleseconds(), target);
  }

  // optional uint64 ulCycleCount = 4;
  if (has_ulcyclecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->ulcyclecount(), target);
  }

  // optional uint64 ulCycleOffset = 5;
  if (has_ulcycleoffset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->ulcycleoffset(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LadybugTimeStamp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 ulSeconds = 1;
    if (has_ulseconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ulseconds());
    }

    // required uint64 ulMicroSeconds = 2;
    if (has_ulmicroseconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ulmicroseconds());
    }

    // optional uint64 ulCycleSeconds = 3;
    if (has_ulcycleseconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ulcycleseconds());
    }

    // optional uint64 ulCycleCount = 4;
    if (has_ulcyclecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ulcyclecount());
    }

    // optional uint64 ulCycleOffset = 5;
    if (has_ulcycleoffset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ulcycleoffset());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LadybugTimeStamp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LadybugTimeStamp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LadybugTimeStamp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LadybugTimeStamp::MergeFrom(const LadybugTimeStamp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ulseconds()) {
      set_ulseconds(from.ulseconds());
    }
    if (from.has_ulmicroseconds()) {
      set_ulmicroseconds(from.ulmicroseconds());
    }
    if (from.has_ulcycleseconds()) {
      set_ulcycleseconds(from.ulcycleseconds());
    }
    if (from.has_ulcyclecount()) {
      set_ulcyclecount(from.ulcyclecount());
    }
    if (from.has_ulcycleoffset()) {
      set_ulcycleoffset(from.ulcycleoffset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LadybugTimeStamp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LadybugTimeStamp::CopyFrom(const LadybugTimeStamp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LadybugTimeStamp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void LadybugTimeStamp::Swap(LadybugTimeStamp* other) {
  if (other != this) {
    std::swap(ulseconds_, other->ulseconds_);
    std::swap(ulmicroseconds_, other->ulmicroseconds_);
    std::swap(ulcycleseconds_, other->ulcycleseconds_);
    std::swap(ulcyclecount_, other->ulcyclecount_);
    std::swap(ulcycleoffset_, other->ulcycleoffset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LadybugTimeStamp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LadybugTimeStamp_descriptor_;
  metadata.reflection = LadybugTimeStamp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pbDisortion::kFocalXFieldNumber;
const int pbDisortion::kFocalYFieldNumber;
const int pbDisortion::kCenterXFieldNumber;
const int pbDisortion::kCenterYFieldNumber;
#endif  // !_MSC_VER

pbDisortion::pbDisortion()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pbDisortion::InitAsDefaultInstance() {
}

pbDisortion::pbDisortion(const pbDisortion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pbDisortion::SharedCtor() {
  _cached_size_ = 0;
  focalx_ = 0;
  focaly_ = 0;
  centerx_ = 0;
  centery_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pbDisortion::~pbDisortion() {
  SharedDtor();
}

void pbDisortion::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pbDisortion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pbDisortion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pbDisortion_descriptor_;
}

const pbDisortion& pbDisortion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_imageMessage_2eproto();
  return *default_instance_;
}

pbDisortion* pbDisortion::default_instance_ = NULL;

pbDisortion* pbDisortion::New() const {
  return new pbDisortion;
}

void pbDisortion::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    focalx_ = 0;
    focaly_ = 0;
    centerx_ = 0;
    centery_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pbDisortion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double focalX = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &focalx_)));
          set_has_focalx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_focalY;
        break;
      }

      // optional double focalY = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_focalY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &focaly_)));
          set_has_focaly();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_centerX;
        break;
      }

      // optional double centerX = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_centerX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &centerx_)));
          set_has_centerx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_centerY;
        break;
      }

      // optional double centerY = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_centerY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &centery_)));
          set_has_centery();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pbDisortion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double focalX = 1;
  if (has_focalx()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->focalx(), output);
  }

  // optional double focalY = 2;
  if (has_focaly()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->focaly(), output);
  }

  // optional double centerX = 3;
  if (has_centerx()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->centerx(), output);
  }

  // optional double centerY = 4;
  if (has_centery()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->centery(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pbDisortion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double focalX = 1;
  if (has_focalx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->focalx(), target);
  }

  // optional double focalY = 2;
  if (has_focaly()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->focaly(), target);
  }

  // optional double centerX = 3;
  if (has_centerx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->centerx(), target);
  }

  // optional double centerY = 4;
  if (has_centery()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->centery(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pbDisortion::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double focalX = 1;
    if (has_focalx()) {
      total_size += 1 + 8;
    }

    // optional double focalY = 2;
    if (has_focaly()) {
      total_size += 1 + 8;
    }

    // optional double centerX = 3;
    if (has_centerx()) {
      total_size += 1 + 8;
    }

    // optional double centerY = 4;
    if (has_centery()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pbDisortion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pbDisortion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pbDisortion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pbDisortion::MergeFrom(const pbDisortion& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_focalx()) {
      set_focalx(from.focalx());
    }
    if (from.has_focaly()) {
      set_focaly(from.focaly());
    }
    if (from.has_centerx()) {
      set_centerx(from.centerx());
    }
    if (from.has_centery()) {
      set_centery(from.centery());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pbDisortion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pbDisortion::CopyFrom(const pbDisortion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pbDisortion::IsInitialized() const {

  return true;
}

void pbDisortion::Swap(pbDisortion* other) {
  if (other != this) {
    std::swap(focalx_, other->focalx_);
    std::swap(focaly_, other->focaly_);
    std::swap(centerx_, other->centerx_);
    std::swap(centery_, other->centery_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pbDisortion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pbDisortion_descriptor_;
  metadata.reflection = pbDisortion_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pbPosition::kRxFieldNumber;
const int pbPosition::kRyFieldNumber;
const int pbPosition::kRzFieldNumber;
const int pbPosition::kTxFieldNumber;
const int pbPosition::kTyFieldNumber;
const int pbPosition::kTzFieldNumber;
#endif  // !_MSC_VER

pbPosition::pbPosition()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pbPosition::InitAsDefaultInstance() {
}

pbPosition::pbPosition(const pbPosition& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pbPosition::SharedCtor() {
  _cached_size_ = 0;
  rx_ = 0;
  ry_ = 0;
  rz_ = 0;
  tx_ = 0;
  ty_ = 0;
  tz_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pbPosition::~pbPosition() {
  SharedDtor();
}

void pbPosition::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pbPosition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pbPosition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pbPosition_descriptor_;
}

const pbPosition& pbPosition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_imageMessage_2eproto();
  return *default_instance_;
}

pbPosition* pbPosition::default_instance_ = NULL;

pbPosition* pbPosition::New() const {
  return new pbPosition;
}

void pbPosition::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rx_ = 0;
    ry_ = 0;
    rz_ = 0;
    tx_ = 0;
    ty_ = 0;
    tz_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pbPosition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double Rx = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rx_)));
          set_has_rx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_Ry;
        break;
      }

      // required double Ry = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Ry:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ry_)));
          set_has_ry();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_Rz;
        break;
      }

      // required double Rz = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Rz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rz_)));
          set_has_rz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_Tx;
        break;
      }

      // required double Tx = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Tx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tx_)));
          set_has_tx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_Ty;
        break;
      }

      // required double Ty = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Ty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ty_)));
          set_has_ty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_Tz;
        break;
      }

      // required double Tz = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Tz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tz_)));
          set_has_tz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pbPosition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double Rx = 1;
  if (has_rx()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->rx(), output);
  }

  // required double Ry = 2;
  if (has_ry()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->ry(), output);
  }

  // required double Rz = 3;
  if (has_rz()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->rz(), output);
  }

  // required double Tx = 4;
  if (has_tx()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->tx(), output);
  }

  // required double Ty = 5;
  if (has_ty()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->ty(), output);
  }

  // required double Tz = 6;
  if (has_tz()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->tz(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pbPosition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double Rx = 1;
  if (has_rx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->rx(), target);
  }

  // required double Ry = 2;
  if (has_ry()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->ry(), target);
  }

  // required double Rz = 3;
  if (has_rz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->rz(), target);
  }

  // required double Tx = 4;
  if (has_tx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->tx(), target);
  }

  // required double Ty = 5;
  if (has_ty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->ty(), target);
  }

  // required double Tz = 6;
  if (has_tz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->tz(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pbPosition::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double Rx = 1;
    if (has_rx()) {
      total_size += 1 + 8;
    }

    // required double Ry = 2;
    if (has_ry()) {
      total_size += 1 + 8;
    }

    // required double Rz = 3;
    if (has_rz()) {
      total_size += 1 + 8;
    }

    // required double Tx = 4;
    if (has_tx()) {
      total_size += 1 + 8;
    }

    // required double Ty = 5;
    if (has_ty()) {
      total_size += 1 + 8;
    }

    // required double Tz = 6;
    if (has_tz()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pbPosition::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pbPosition* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pbPosition*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pbPosition::MergeFrom(const pbPosition& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rx()) {
      set_rx(from.rx());
    }
    if (from.has_ry()) {
      set_ry(from.ry());
    }
    if (from.has_rz()) {
      set_rz(from.rz());
    }
    if (from.has_tx()) {
      set_tx(from.tx());
    }
    if (from.has_ty()) {
      set_ty(from.ty());
    }
    if (from.has_tz()) {
      set_tz(from.tz());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pbPosition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pbPosition::CopyFrom(const pbPosition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pbPosition::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void pbPosition::Swap(pbPosition* other) {
  if (other != this) {
    std::swap(rx_, other->rx_);
    std::swap(ry_, other->ry_);
    std::swap(rz_, other->rz_);
    std::swap(tx_, other->tx_);
    std::swap(ty_, other->ty_);
    std::swap(tz_, other->tz_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pbPosition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pbPosition_descriptor_;
  metadata.reflection = pbPosition_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pbFloatTriblet::kXFieldNumber;
const int pbFloatTriblet::kYFieldNumber;
const int pbFloatTriblet::kZFieldNumber;
#endif  // !_MSC_VER

pbFloatTriblet::pbFloatTriblet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pbFloatTriblet::InitAsDefaultInstance() {
}

pbFloatTriblet::pbFloatTriblet(const pbFloatTriblet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pbFloatTriblet::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pbFloatTriblet::~pbFloatTriblet() {
  SharedDtor();
}

void pbFloatTriblet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pbFloatTriblet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pbFloatTriblet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pbFloatTriblet_descriptor_;
}

const pbFloatTriblet& pbFloatTriblet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_imageMessage_2eproto();
  return *default_instance_;
}

pbFloatTriblet* pbFloatTriblet::default_instance_ = NULL;

pbFloatTriblet* pbFloatTriblet::New() const {
  return new pbFloatTriblet;
}

void pbFloatTriblet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    z_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pbFloatTriblet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // required float y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_Z;
        break;
      }

      // required float Z = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pbFloatTriblet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // required float Z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pbFloatTriblet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // required float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // required float Z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pbFloatTriblet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // required float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // required float Z = 3;
    if (has_z()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pbFloatTriblet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pbFloatTriblet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pbFloatTriblet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pbFloatTriblet::MergeFrom(const pbFloatTriblet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pbFloatTriblet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pbFloatTriblet::CopyFrom(const pbFloatTriblet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pbFloatTriblet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void pbFloatTriblet::Swap(pbFloatTriblet* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pbFloatTriblet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pbFloatTriblet_descriptor_;
  metadata.reflection = pbFloatTriblet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pbImage::kNumberFieldNumber;
const int pbImage::kTypeFieldNumber;
const int pbImage::kImageFieldNumber;
const int pbImage::kSizeFieldNumber;
const int pbImage::kNameFieldNumber;
const int pbImage::kHeightFieldNumber;
const int pbImage::kWidthFieldNumber;
const int pbImage::kPackagesFieldNumber;
const int pbImage::kDistortionFieldNumber;
const int pbImage::kPositionFieldNumber;
const int pbImage::kBayerEncodingFieldNumber;
const int pbImage::kColorEncodingFieldNumber;
const int pbImage::kBorderTopFieldNumber;
const int pbImage::kBorderBottemFieldNumber;
const int pbImage::kBorderLeftFieldNumber;
const int pbImage::kBorderRightFieldNumber;
#endif  // !_MSC_VER

pbImage::pbImage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pbImage::InitAsDefaultInstance() {
  distortion_ = const_cast< ::ladybug5_network::pbDisortion*>(&::ladybug5_network::pbDisortion::default_instance());
  position_ = const_cast< ::ladybug5_network::pbPosition*>(&::ladybug5_network::pbPosition::default_instance());
}

pbImage::pbImage(const pbImage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pbImage::SharedCtor() {
  _cached_size_ = 0;
  number_ = 0;
  type_ = 1;
  image_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  size_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  height_ = 0u;
  width_ = 0u;
  packages_ = 0u;
  distortion_ = NULL;
  position_ = NULL;
  bayer_encoding_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  color_encoding_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  border_top_ = 0u;
  border_bottem_ = 0u;
  border_left_ = 0u;
  border_right_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pbImage::~pbImage() {
  SharedDtor();
}

void pbImage::SharedDtor() {
  if (image_ != &::google::protobuf::internal::kEmptyString) {
    delete image_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (bayer_encoding_ != &::google::protobuf::internal::kEmptyString) {
    delete bayer_encoding_;
  }
  if (color_encoding_ != &::google::protobuf::internal::kEmptyString) {
    delete color_encoding_;
  }
  if (this != default_instance_) {
    delete distortion_;
    delete position_;
  }
}

void pbImage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pbImage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pbImage_descriptor_;
}

const pbImage& pbImage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_imageMessage_2eproto();
  return *default_instance_;
}

pbImage* pbImage::default_instance_ = NULL;

pbImage* pbImage::New() const {
  return new pbImage;
}

void pbImage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    number_ = 0;
    type_ = 1;
    if (has_image()) {
      if (image_ != &::google::protobuf::internal::kEmptyString) {
        image_->clear();
      }
    }
    size_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    height_ = 0u;
    width_ = 0u;
    packages_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_distortion()) {
      if (distortion_ != NULL) distortion_->::ladybug5_network::pbDisortion::Clear();
    }
    if (has_position()) {
      if (position_ != NULL) position_->::ladybug5_network::pbPosition::Clear();
    }
    if (has_bayer_encoding()) {
      if (bayer_encoding_ != &::google::protobuf::internal::kEmptyString) {
        bayer_encoding_->clear();
      }
    }
    if (has_color_encoding()) {
      if (color_encoding_ != &::google::protobuf::internal::kEmptyString) {
        color_encoding_->clear();
      }
    }
    border_top_ = 0u;
    border_bottem_ = 0u;
    border_left_ = 0u;
    border_right_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pbImage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 number = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &number_)));
          set_has_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_type;
        break;
      }

      // optional .ladybug5_network.ImageType type = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ladybug5_network::ImageType_IsValid(value)) {
            set_type(static_cast< ::ladybug5_network::ImageType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_image;
        break;
      }

      // optional bytes image = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_image:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_image()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_size;
        break;
      }

      // optional uint32 size = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_name;
        break;
      }

      // optional string name = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_height;
        break;
      }

      // optional uint32 height = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_width;
        break;
      }

      // optional uint32 width = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_packages;
        break;
      }

      // optional uint32 packages = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_packages:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &packages_)));
          set_has_packages();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_distortion;
        break;
      }

      // optional .ladybug5_network.pbDisortion distortion = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_distortion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_distortion()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_position;
        break;
      }

      // optional .ladybug5_network.pbPosition position = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_bayer_encoding;
        break;
      }

      // optional string bayer_encoding = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bayer_encoding:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bayer_encoding()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bayer_encoding().data(), this->bayer_encoding().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_color_encoding;
        break;
      }

      // optional string color_encoding = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_color_encoding:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_color_encoding()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->color_encoding().data(), this->color_encoding().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_border_top;
        break;
      }

      // optional uint32 border_top = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_border_top:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &border_top_)));
          set_has_border_top();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_border_bottem;
        break;
      }

      // optional uint32 border_bottem = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_border_bottem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &border_bottem_)));
          set_has_border_bottem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_border_left;
        break;
      }

      // optional uint32 border_left = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_border_left:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &border_left_)));
          set_has_border_left();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_border_right;
        break;
      }

      // optional uint32 border_right = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_border_right:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &border_right_)));
          set_has_border_right();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pbImage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 number = 6;
  if (has_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->number(), output);
  }

  // optional .ladybug5_network.ImageType type = 7;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->type(), output);
  }

  // optional bytes image = 8;
  if (has_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      8, this->image(), output);
  }

  // optional uint32 size = 9;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->size(), output);
  }

  // optional string name = 11;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->name(), output);
  }

  // optional uint32 height = 12;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->height(), output);
  }

  // optional uint32 width = 13;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->width(), output);
  }

  // optional uint32 packages = 14;
  if (has_packages()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->packages(), output);
  }

  // optional .ladybug5_network.pbDisortion distortion = 15;
  if (has_distortion()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->distortion(), output);
  }

  // optional .ladybug5_network.pbPosition position = 16;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->position(), output);
  }

  // optional string bayer_encoding = 17;
  if (has_bayer_encoding()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bayer_encoding().data(), this->bayer_encoding().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->bayer_encoding(), output);
  }

  // optional string color_encoding = 18;
  if (has_color_encoding()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->color_encoding().data(), this->color_encoding().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->color_encoding(), output);
  }

  // optional uint32 border_top = 19;
  if (has_border_top()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->border_top(), output);
  }

  // optional uint32 border_bottem = 20;
  if (has_border_bottem()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->border_bottem(), output);
  }

  // optional uint32 border_left = 21;
  if (has_border_left()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->border_left(), output);
  }

  // optional uint32 border_right = 22;
  if (has_border_right()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->border_right(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pbImage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 number = 6;
  if (has_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->number(), target);
  }

  // optional .ladybug5_network.ImageType type = 7;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->type(), target);
  }

  // optional bytes image = 8;
  if (has_image()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->image(), target);
  }

  // optional uint32 size = 9;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->size(), target);
  }

  // optional string name = 11;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->name(), target);
  }

  // optional uint32 height = 12;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->height(), target);
  }

  // optional uint32 width = 13;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->width(), target);
  }

  // optional uint32 packages = 14;
  if (has_packages()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->packages(), target);
  }

  // optional .ladybug5_network.pbDisortion distortion = 15;
  if (has_distortion()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->distortion(), target);
  }

  // optional .ladybug5_network.pbPosition position = 16;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->position(), target);
  }

  // optional string bayer_encoding = 17;
  if (has_bayer_encoding()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bayer_encoding().data(), this->bayer_encoding().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->bayer_encoding(), target);
  }

  // optional string color_encoding = 18;
  if (has_color_encoding()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->color_encoding().data(), this->color_encoding().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->color_encoding(), target);
  }

  // optional uint32 border_top = 19;
  if (has_border_top()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->border_top(), target);
  }

  // optional uint32 border_bottem = 20;
  if (has_border_bottem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->border_bottem(), target);
  }

  // optional uint32 border_left = 21;
  if (has_border_left()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->border_left(), target);
  }

  // optional uint32 border_right = 22;
  if (has_border_right()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->border_right(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pbImage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 number = 6;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->number());
    }

    // optional .ladybug5_network.ImageType type = 7;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional bytes image = 8;
    if (has_image()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->image());
    }

    // optional uint32 size = 9;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->size());
    }

    // optional string name = 11;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 height = 12;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->height());
    }

    // optional uint32 width = 13;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->width());
    }

    // optional uint32 packages = 14;
    if (has_packages()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->packages());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .ladybug5_network.pbDisortion distortion = 15;
    if (has_distortion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->distortion());
    }

    // optional .ladybug5_network.pbPosition position = 16;
    if (has_position()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }

    // optional string bayer_encoding = 17;
    if (has_bayer_encoding()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bayer_encoding());
    }

    // optional string color_encoding = 18;
    if (has_color_encoding()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->color_encoding());
    }

    // optional uint32 border_top = 19;
    if (has_border_top()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->border_top());
    }

    // optional uint32 border_bottem = 20;
    if (has_border_bottem()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->border_bottem());
    }

    // optional uint32 border_left = 21;
    if (has_border_left()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->border_left());
    }

    // optional uint32 border_right = 22;
    if (has_border_right()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->border_right());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pbImage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pbImage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pbImage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pbImage::MergeFrom(const pbImage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_number()) {
      set_number(from.number());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_image()) {
      set_image(from.image());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_packages()) {
      set_packages(from.packages());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_distortion()) {
      mutable_distortion()->::ladybug5_network::pbDisortion::MergeFrom(from.distortion());
    }
    if (from.has_position()) {
      mutable_position()->::ladybug5_network::pbPosition::MergeFrom(from.position());
    }
    if (from.has_bayer_encoding()) {
      set_bayer_encoding(from.bayer_encoding());
    }
    if (from.has_color_encoding()) {
      set_color_encoding(from.color_encoding());
    }
    if (from.has_border_top()) {
      set_border_top(from.border_top());
    }
    if (from.has_border_bottem()) {
      set_border_bottem(from.border_bottem());
    }
    if (from.has_border_left()) {
      set_border_left(from.border_left());
    }
    if (from.has_border_right()) {
      set_border_right(from.border_right());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pbImage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pbImage::CopyFrom(const pbImage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pbImage::IsInitialized() const {

  if (has_position()) {
    if (!this->position().IsInitialized()) return false;
  }
  return true;
}

void pbImage::Swap(pbImage* other) {
  if (other != this) {
    std::swap(number_, other->number_);
    std::swap(type_, other->type_);
    std::swap(image_, other->image_);
    std::swap(size_, other->size_);
    std::swap(name_, other->name_);
    std::swap(height_, other->height_);
    std::swap(width_, other->width_);
    std::swap(packages_, other->packages_);
    std::swap(distortion_, other->distortion_);
    std::swap(position_, other->position_);
    std::swap(bayer_encoding_, other->bayer_encoding_);
    std::swap(color_encoding_, other->color_encoding_);
    std::swap(border_top_, other->border_top_);
    std::swap(border_bottem_, other->border_bottem_);
    std::swap(border_left_, other->border_left_);
    std::swap(border_right_, other->border_right_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pbImage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pbImage_descriptor_;
  metadata.reflection = pbImage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pbSensor::kTemperatureFieldNumber;
const int pbSensor::kBarometerFieldNumber;
const int pbSensor::kHumidityFieldNumber;
const int pbSensor::kCompassFieldNumber;
const int pbSensor::kAccelerometerFieldNumber;
const int pbSensor::kGyroscopeFieldNumber;
#endif  // !_MSC_VER

pbSensor::pbSensor()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pbSensor::InitAsDefaultInstance() {
  compass_ = const_cast< ::ladybug5_network::pbFloatTriblet*>(&::ladybug5_network::pbFloatTriblet::default_instance());
  accelerometer_ = const_cast< ::ladybug5_network::pbFloatTriblet*>(&::ladybug5_network::pbFloatTriblet::default_instance());
  gyroscope_ = const_cast< ::ladybug5_network::pbFloatTriblet*>(&::ladybug5_network::pbFloatTriblet::default_instance());
}

pbSensor::pbSensor(const pbSensor& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pbSensor::SharedCtor() {
  _cached_size_ = 0;
  temperature_ = 0u;
  barometer_ = 0u;
  humidity_ = 0u;
  compass_ = NULL;
  accelerometer_ = NULL;
  gyroscope_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pbSensor::~pbSensor() {
  SharedDtor();
}

void pbSensor::SharedDtor() {
  if (this != default_instance_) {
    delete compass_;
    delete accelerometer_;
    delete gyroscope_;
  }
}

void pbSensor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pbSensor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pbSensor_descriptor_;
}

const pbSensor& pbSensor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_imageMessage_2eproto();
  return *default_instance_;
}

pbSensor* pbSensor::default_instance_ = NULL;

pbSensor* pbSensor::New() const {
  return new pbSensor;
}

void pbSensor::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    temperature_ = 0u;
    barometer_ = 0u;
    humidity_ = 0u;
    if (has_compass()) {
      if (compass_ != NULL) compass_->::ladybug5_network::pbFloatTriblet::Clear();
    }
    if (has_accelerometer()) {
      if (accelerometer_ != NULL) accelerometer_->::ladybug5_network::pbFloatTriblet::Clear();
    }
    if (has_gyroscope()) {
      if (gyroscope_ != NULL) gyroscope_->::ladybug5_network::pbFloatTriblet::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pbSensor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 temperature = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &temperature_)));
          set_has_temperature();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_barometer;
        break;
      }

      // optional uint32 barometer = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_barometer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &barometer_)));
          set_has_barometer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_humidity;
        break;
      }

      // optional uint32 humidity = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_humidity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &humidity_)));
          set_has_humidity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_compass;
        break;
      }

      // optional .ladybug5_network.pbFloatTriblet compass = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_compass:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_compass()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_accelerometer;
        break;
      }

      // optional .ladybug5_network.pbFloatTriblet accelerometer = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_accelerometer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_accelerometer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_gyroscope;
        break;
      }

      // optional .ladybug5_network.pbFloatTriblet gyroscope = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gyroscope:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gyroscope()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pbSensor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 temperature = 1;
  if (has_temperature()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->temperature(), output);
  }

  // optional uint32 barometer = 2;
  if (has_barometer()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->barometer(), output);
  }

  // optional uint32 humidity = 3;
  if (has_humidity()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->humidity(), output);
  }

  // optional .ladybug5_network.pbFloatTriblet compass = 4;
  if (has_compass()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->compass(), output);
  }

  // optional .ladybug5_network.pbFloatTriblet accelerometer = 5;
  if (has_accelerometer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->accelerometer(), output);
  }

  // optional .ladybug5_network.pbFloatTriblet gyroscope = 6;
  if (has_gyroscope()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->gyroscope(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pbSensor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 temperature = 1;
  if (has_temperature()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->temperature(), target);
  }

  // optional uint32 barometer = 2;
  if (has_barometer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->barometer(), target);
  }

  // optional uint32 humidity = 3;
  if (has_humidity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->humidity(), target);
  }

  // optional .ladybug5_network.pbFloatTriblet compass = 4;
  if (has_compass()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->compass(), target);
  }

  // optional .ladybug5_network.pbFloatTriblet accelerometer = 5;
  if (has_accelerometer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->accelerometer(), target);
  }

  // optional .ladybug5_network.pbFloatTriblet gyroscope = 6;
  if (has_gyroscope()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->gyroscope(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pbSensor::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 temperature = 1;
    if (has_temperature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->temperature());
    }

    // optional uint32 barometer = 2;
    if (has_barometer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->barometer());
    }

    // optional uint32 humidity = 3;
    if (has_humidity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->humidity());
    }

    // optional .ladybug5_network.pbFloatTriblet compass = 4;
    if (has_compass()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->compass());
    }

    // optional .ladybug5_network.pbFloatTriblet accelerometer = 5;
    if (has_accelerometer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->accelerometer());
    }

    // optional .ladybug5_network.pbFloatTriblet gyroscope = 6;
    if (has_gyroscope()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gyroscope());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pbSensor::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pbSensor* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pbSensor*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pbSensor::MergeFrom(const pbSensor& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_temperature()) {
      set_temperature(from.temperature());
    }
    if (from.has_barometer()) {
      set_barometer(from.barometer());
    }
    if (from.has_humidity()) {
      set_humidity(from.humidity());
    }
    if (from.has_compass()) {
      mutable_compass()->::ladybug5_network::pbFloatTriblet::MergeFrom(from.compass());
    }
    if (from.has_accelerometer()) {
      mutable_accelerometer()->::ladybug5_network::pbFloatTriblet::MergeFrom(from.accelerometer());
    }
    if (from.has_gyroscope()) {
      mutable_gyroscope()->::ladybug5_network::pbFloatTriblet::MergeFrom(from.gyroscope());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pbSensor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pbSensor::CopyFrom(const pbSensor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pbSensor::IsInitialized() const {

  if (has_compass()) {
    if (!this->compass().IsInitialized()) return false;
  }
  if (has_accelerometer()) {
    if (!this->accelerometer().IsInitialized()) return false;
  }
  if (has_gyroscope()) {
    if (!this->gyroscope().IsInitialized()) return false;
  }
  return true;
}

void pbSensor::Swap(pbSensor* other) {
  if (other != this) {
    std::swap(temperature_, other->temperature_);
    std::swap(barometer_, other->barometer_);
    std::swap(humidity_, other->humidity_);
    std::swap(compass_, other->compass_);
    std::swap(accelerometer_, other->accelerometer_);
    std::swap(gyroscope_, other->gyroscope_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pbSensor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pbSensor_descriptor_;
  metadata.reflection = pbSensor_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pbMessage::kCameraFieldNumber;
const int pbMessage::kIdFieldNumber;
const int pbMessage::kNameFieldNumber;
const int pbMessage::kImagesFieldNumber;
const int pbMessage::kTimeFieldNumber;
const int pbMessage::kSensorsFieldNumber;
const int pbMessage::kSerialNumberFieldNumber;
#endif  // !_MSC_VER

pbMessage::pbMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pbMessage::InitAsDefaultInstance() {
  time_ = const_cast< ::ladybug5_network::LadybugTimeStamp*>(&::ladybug5_network::LadybugTimeStamp::default_instance());
  sensors_ = const_cast< ::ladybug5_network::pbSensor*>(&::ladybug5_network::pbSensor::default_instance());
}

pbMessage::pbMessage(const pbMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pbMessage::SharedCtor() {
  _cached_size_ = 0;
  camera_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_ = NULL;
  sensors_ = NULL;
  serial_number_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pbMessage::~pbMessage() {
  SharedDtor();
}

void pbMessage::SharedDtor() {
  if (camera_ != &::google::protobuf::internal::kEmptyString) {
    delete camera_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (serial_number_ != &::google::protobuf::internal::kEmptyString) {
    delete serial_number_;
  }
  if (this != default_instance_) {
    delete time_;
    delete sensors_;
  }
}

void pbMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pbMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pbMessage_descriptor_;
}

const pbMessage& pbMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_imageMessage_2eproto();
  return *default_instance_;
}

pbMessage* pbMessage::default_instance_ = NULL;

pbMessage* pbMessage::New() const {
  return new pbMessage;
}

void pbMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_camera()) {
      if (camera_ != &::google::protobuf::internal::kEmptyString) {
        camera_->clear();
      }
    }
    id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_time()) {
      if (time_ != NULL) time_->::ladybug5_network::LadybugTimeStamp::Clear();
    }
    if (has_sensors()) {
      if (sensors_ != NULL) sensors_->::ladybug5_network::pbSensor::Clear();
    }
    if (has_serial_number()) {
      if (serial_number_ != &::google::protobuf::internal::kEmptyString) {
        serial_number_->clear();
      }
    }
  }
  images_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pbMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string camera = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_camera()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->camera().data(), this->camera().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // required int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_Images;
        break;
      }

      // repeated .ladybug5_network.pbImage Images = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Images:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_images()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_Images;
        if (input->ExpectTag(42)) goto parse_time;
        break;
      }

      // required .ladybug5_network.LadybugTimeStamp time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_time()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_sensors;
        break;
      }

      // optional .ladybug5_network.pbSensor sensors = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sensors:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sensors()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_serial_number;
        break;
      }

      // optional string serial_number = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_serial_number:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serial_number()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->serial_number().data(), this->serial_number().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pbMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string camera = 1;
  if (has_camera()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->camera().data(), this->camera().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->camera(), output);
  }

  // required int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // repeated .ladybug5_network.pbImage Images = 4;
  for (int i = 0; i < this->images_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->images(i), output);
  }

  // required .ladybug5_network.LadybugTimeStamp time = 5;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->time(), output);
  }

  // optional .ladybug5_network.pbSensor sensors = 6;
  if (has_sensors()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->sensors(), output);
  }

  // optional string serial_number = 7;
  if (has_serial_number()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->serial_number().data(), this->serial_number().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->serial_number(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pbMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string camera = 1;
  if (has_camera()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->camera().data(), this->camera().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->camera(), target);
  }

  // required int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // repeated .ladybug5_network.pbImage Images = 4;
  for (int i = 0; i < this->images_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->images(i), target);
  }

  // required .ladybug5_network.LadybugTimeStamp time = 5;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->time(), target);
  }

  // optional .ladybug5_network.pbSensor sensors = 6;
  if (has_sensors()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->sensors(), target);
  }

  // optional string serial_number = 7;
  if (has_serial_number()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->serial_number().data(), this->serial_number().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->serial_number(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pbMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string camera = 1;
    if (has_camera()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->camera());
    }

    // required int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required .ladybug5_network.LadybugTimeStamp time = 5;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->time());
    }

    // optional .ladybug5_network.pbSensor sensors = 6;
    if (has_sensors()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sensors());
    }

    // optional string serial_number = 7;
    if (has_serial_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serial_number());
    }

  }
  // repeated .ladybug5_network.pbImage Images = 4;
  total_size += 1 * this->images_size();
  for (int i = 0; i < this->images_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->images(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pbMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pbMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pbMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pbMessage::MergeFrom(const pbMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  images_.MergeFrom(from.images_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_camera()) {
      set_camera(from.camera());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_time()) {
      mutable_time()->::ladybug5_network::LadybugTimeStamp::MergeFrom(from.time());
    }
    if (from.has_sensors()) {
      mutable_sensors()->::ladybug5_network::pbSensor::MergeFrom(from.sensors());
    }
    if (from.has_serial_number()) {
      set_serial_number(from.serial_number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pbMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pbMessage::CopyFrom(const pbMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pbMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000013) != 0x00000013) return false;

  for (int i = 0; i < images_size(); i++) {
    if (!this->images(i).IsInitialized()) return false;
  }
  if (has_time()) {
    if (!this->time().IsInitialized()) return false;
  }
  if (has_sensors()) {
    if (!this->sensors().IsInitialized()) return false;
  }
  return true;
}

void pbMessage::Swap(pbMessage* other) {
  if (other != this) {
    std::swap(camera_, other->camera_);
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    images_.Swap(&other->images_);
    std::swap(time_, other->time_);
    std::swap(sensors_, other->sensors_);
    std::swap(serial_number_, other->serial_number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pbMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pbMessage_descriptor_;
  metadata.reflection = pbMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_start_msg::kNameFieldNumber;
const int pb_start_msg::kCommandFieldNumber;
#endif  // !_MSC_VER

pb_start_msg::pb_start_msg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_start_msg::InitAsDefaultInstance() {
}

pb_start_msg::pb_start_msg(const pb_start_msg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_start_msg::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  command_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_start_msg::~pb_start_msg() {
  SharedDtor();
}

void pb_start_msg::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void pb_start_msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_start_msg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_start_msg_descriptor_;
}

const pb_start_msg& pb_start_msg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_imageMessage_2eproto();
  return *default_instance_;
}

pb_start_msg* pb_start_msg::default_instance_ = NULL;

pb_start_msg* pb_start_msg::New() const {
  return new pb_start_msg;
}

void pb_start_msg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    command_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_start_msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_command;
        break;
      }

      // optional .ladybug5_network.command command = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_command:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ladybug5_network::command_IsValid(value)) {
            set_command(static_cast< ::ladybug5_network::command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_start_msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional .ladybug5_network.command command = 2;
  if (has_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->command(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_start_msg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .ladybug5_network.command command = 2;
  if (has_command()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->command(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_start_msg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .ladybug5_network.command command = 2;
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->command());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_start_msg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_start_msg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_start_msg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_start_msg::MergeFrom(const pb_start_msg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_command()) {
      set_command(from.command());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_start_msg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_start_msg::CopyFrom(const pb_start_msg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_start_msg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void pb_start_msg::Swap(pb_start_msg* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(command_, other->command_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_start_msg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_start_msg_descriptor_;
  metadata.reflection = pb_start_msg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_reply::kSuccessFieldNumber;
const int pb_reply::kInfoFieldNumber;
const int pb_reply::kStartFieldNumber;
#endif  // !_MSC_VER

pb_reply::pb_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_reply::InitAsDefaultInstance() {
  start_ = const_cast< ::ladybug5_network::pb_start_msg*>(&::ladybug5_network::pb_start_msg::default_instance());
}

pb_reply::pb_reply(const pb_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_reply::SharedCtor() {
  _cached_size_ = 0;
  success_ = false;
  info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  start_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_reply::~pb_reply() {
  SharedDtor();
}

void pb_reply::SharedDtor() {
  if (info_ != &::google::protobuf::internal::kEmptyString) {
    delete info_;
  }
  if (this != default_instance_) {
    delete start_;
  }
}

void pb_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_reply_descriptor_;
}

const pb_reply& pb_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_imageMessage_2eproto();
  return *default_instance_;
}

pb_reply* pb_reply::default_instance_ = NULL;

pb_reply* pb_reply::New() const {
  return new pb_reply;
}

void pb_reply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    success_ = false;
    if (has_info()) {
      if (info_ != &::google::protobuf::internal::kEmptyString) {
        info_->clear();
      }
    }
    if (has_start()) {
      if (start_ != NULL) start_->::ladybug5_network::pb_start_msg::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool success = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // optional string info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->info().data(), this->info().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_start;
        break;
      }

      // optional .ladybug5_network.pb_start_msg start = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_start:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool success = 1;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }

  // optional string info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->info().data(), this->info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->info(), output);
  }

  // optional .ladybug5_network.pb_start_msg start = 3;
  if (has_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->start(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool success = 1;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }

  // optional string info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->info().data(), this->info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->info(), target);
  }

  // optional .ladybug5_network.pb_start_msg start = 3;
  if (has_start()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->start(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool success = 1;
    if (has_success()) {
      total_size += 1 + 1;
    }

    // optional string info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->info());
    }

    // optional .ladybug5_network.pb_start_msg start = 3;
    if (has_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->start());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_reply::MergeFrom(const pb_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_success()) {
      set_success(from.success());
    }
    if (from.has_info()) {
      set_info(from.info());
    }
    if (from.has_start()) {
      mutable_start()->::ladybug5_network::pb_start_msg::MergeFrom(from.start());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_reply::CopyFrom(const pb_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_reply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_start()) {
    if (!this->start().IsInitialized()) return false;
  }
  return true;
}

void pb_reply::Swap(pb_reply* other) {
  if (other != this) {
    std::swap(success_, other->success_);
    std::swap(info_, other->info_);
    std::swap(start_, other->start_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_reply_descriptor_;
  metadata.reflection = pb_reply_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ladybug5_network

// @@protoc_insertion_point(global_scope)
